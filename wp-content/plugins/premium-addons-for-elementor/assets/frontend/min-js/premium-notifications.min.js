!function (e) { e(window).on("elementor/frontend/init", function () { var t = elementorModules.frontend.handlers.Base.extend({ getDefaultSettings: function () { return { selectors: { outerWrap: ".pa-recent-notification", iconWrap: ".pa-rec-not-icon-wrap", postsContainer: ".pa-rec-posts-container", number: ".pa-rec-not-number", closeButton: ".pa-rec-posts-close", metaSeparators: ".premium-blog-meta-separator" }, isHidden: !0 } }, getDefaultElements: function () { var e = this.getSettings("selectors"); return { $outerWrap: this.$element.find(e.outerWrap), $iconWrap: this.$element.find(e.iconWrap), $postsContainer: this.$element.find(e.postsContainer), $number: this.$element.find(e.number), $closeButton: this.$element.find(e.closeButton) } }, bindEvents: function () { this.removeMetaSeparators(), this.run() }, removeMetaSeparators: function () { var t = this.getSettings("selectors"), n = this.$element.find(".premium-blog-post-outer-container"), i = n.first().find(t.metaSeparators), o = n.find(t.user); 1 === i.length ? o.length || n.find(t.metaSeparators).remove() : o.length || n.each(function (n, i) { e(i).find(t.metaSeparators).first().remove() }) }, run: function () { var t = this.elements.$iconWrap, n = this.elements.$postsContainer, i = this.elements.$closeButton, o = this.elements.$number, s = this.getElementSettings(), a = this.getSettings("isHidden"), r = this, m = this.$element.data("id"), l = getComputedStyle(this.$element[0]).getPropertyValue("--pa-recent-posts-width"), c = s.posts_box_position, p = s.cookies; this.hideAnimationElements(), l || (l = "30vw"), n.css(c, "-" + l), n.removeClass("elementor-invisible"), t.on("click", function () { if (a) { if ("yes" === p) { var t = "https:" === document.location.protocol ? "secure" : "", i = r.elements.$outerWrap.data("recent"); document.cookie = "cookieName=paRecentPosts" + m + ";expires=Thu, 01 Jan 1970 00:00:00 UTC;", document.cookie = "paRecentPosts" + m + "=" + i + ";SameSite=Strict;" + t } window.OpenedpostsBox && m !== window.OpenedpostsBox && r.$element.trigger("click"), o.remove(), e(".pa-rec-posts-overlay").css("display", "block").animate({ opacity: 1 }, 500), n.animate({ [c]: 0 }, 500, "swing", function () { r.triggerAnimations(), r.setSettings({ isHidden: !1 }), window.OpenedpostsBox = m }) } }), i.on("click", function () { r.hideBox(l, c) }), e("body").on("click", function (t) { e(t.target).is(e(".pa-rec-posts-container, .pa-rec-posts-container *, .pa-rec-not-icon-wrap, .pa-rec-not-icon-wrap *, .premium-tabs-nav-list-item")) || r.hideBox(l, c) }) }, hideBox: function (t, n) { var i = this.elements.$postsContainer, o = this; e(".pa-rec-posts-overlay").animate({ opacity: 0 }, 500, function () { e(".pa-rec-posts-overlay").css("display", "none") }), i.animate({ [n]: "-" + t }, 500, "swing", function () { o.setSettings({ isHidden: !0 }), o.removeAnimations() }) }, triggerAnimations: function () { var t = this.$element.find(".pa-rec-title"), n = this.$element.find(".pa-rec-posts-body"), i = this.getElementSettings(); i.header_animation && t.removeClass("elementor-invisible").addClass("animated " + i.header_animation).attr("data-e-animation", i.header_animation), i.posts_animation && n.find(".premium-blog-post-outer-container").length > 0 && ("yes" !== i.posts_animation_individial ? n.removeClass("elementor-invisible").addClass("animated " + i.posts_animation).attr("data-e-animation", i.posts_animation) : (n = n.find(".premium-blog-post-outer-container")).map(function (t, n) { setTimeout(function () { e(n).removeClass("elementor-invisible").addClass("animated " + i.posts_animation).attr("data-e-animation", i.posts_animation) }, 0 == t ? 0 : 250) })) }, removeAnimations: function () { this.elements.$postsContainer.find(".animated").each(function (t, n) { var i = e(n).data("e-animation"); e(n).removeClass("animated " + i).addClass("elementor-invisible") }) }, hideAnimationElements: function () { var e = this.$element.find(".pa-rec-title"), t = this.$element.find(".pa-rec-posts-body"), n = this.getElementSettings(); "yes" === n.posts_animation_individial && (t = t.find(".premium-blog-post-outer-container")), n.header_animation && e.addClass("elementor-invisible"), n.posts_animation && this.$element.find(".premium-blog-post-outer-container").length > 0 && t.addClass("elementor-invisible") } }); elementorFrontend.elementsHandler.attachHandler("premium-notifications", t) }) }(jQuery);